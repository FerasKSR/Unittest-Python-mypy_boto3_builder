import multiprocessing
from _typeshed import Incomplete
from collections.abc import Generator
from s3transfer.compat import BaseManager as BaseManager, MAXINT as MAXINT
from s3transfer.constants import ALLOWED_DOWNLOAD_ARGS as ALLOWED_DOWNLOAD_ARGS, MB as MB, PROCESS_USER_AGENT as PROCESS_USER_AGENT
from s3transfer.exceptions import CancelledError as CancelledError, RetriesExceededError as RetriesExceededError
from s3transfer.futures import BaseTransferFuture as BaseTransferFuture, BaseTransferMeta as BaseTransferMeta
from s3transfer.utils import CallArgs as CallArgs, OSUtils as OSUtils, S3_RETRYABLE_DOWNLOAD_ERRORS as S3_RETRYABLE_DOWNLOAD_ERRORS, calculate_num_parts as calculate_num_parts, calculate_range_parameter as calculate_range_parameter
from typing import NamedTuple

logger: Incomplete
SHUTDOWN_SIGNAL: str

class DownloadFileRequest(NamedTuple):
    transfer_id: Incomplete
    bucket: Incomplete
    key: Incomplete
    filename: Incomplete
    extra_args: Incomplete
    expected_size: Incomplete

class GetObjectJob(NamedTuple):
    transfer_id: Incomplete
    bucket: Incomplete
    key: Incomplete
    temp_filename: Incomplete
    extra_args: Incomplete
    offset: Incomplete
    filename: Incomplete

def ignore_ctrl_c() -> Generator[None, None, None]: ...

class ProcessTransferConfig:
    multipart_threshold: Incomplete
    multipart_chunksize: Incomplete
    max_request_processes: Incomplete
    def __init__(self, multipart_threshold=..., multipart_chunksize=..., max_request_processes: int = ...) -> None: ...

class ProcessPoolDownloader:
    def __init__(self, client_kwargs: Incomplete | None = ..., config: Incomplete | None = ...) -> None: ...
    def download_file(self, bucket, key, filename, extra_args: Incomplete | None = ..., expected_size: Incomplete | None = ...): ...
    def shutdown(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, *args) -> None: ...

class ProcessPoolTransferFuture(BaseTransferFuture):
    def __init__(self, monitor, meta) -> None: ...
    @property
    def meta(self): ...
    def done(self): ...
    def result(self): ...
    def cancel(self) -> None: ...

class ProcessPoolTransferMeta(BaseTransferMeta):
    def __init__(self, transfer_id, call_args) -> None: ...
    @property
    def call_args(self): ...
    @property
    def transfer_id(self): ...
    @property
    def user_context(self): ...

class ClientFactory:
    def __init__(self, client_kwargs: Incomplete | None = ...) -> None: ...
    def create_client(self): ...

class TransferMonitor:
    def __init__(self) -> None: ...
    def notify_new_transfer(self): ...
    def is_done(self, transfer_id): ...
    def notify_done(self, transfer_id) -> None: ...
    def poll_for_result(self, transfer_id) -> None: ...
    def notify_exception(self, transfer_id, exception) -> None: ...
    def notify_cancel_all_in_progress(self) -> None: ...
    def get_exception(self, transfer_id): ...
    def notify_expected_jobs_to_complete(self, transfer_id, num_jobs) -> None: ...
    def notify_job_complete(self, transfer_id): ...

class TransferState:
    def __init__(self) -> None: ...
    @property
    def done(self): ...
    def set_done(self) -> None: ...
    def wait_till_done(self) -> None: ...
    @property
    def exception(self): ...
    @exception.setter
    def exception(self, val) -> None: ...
    @property
    def jobs_to_complete(self): ...
    @jobs_to_complete.setter
    def jobs_to_complete(self, val) -> None: ...
    def decrement_jobs_to_complete(self): ...

class TransferMonitorManager(BaseManager): ...

class BaseS3TransferProcess(multiprocessing.Process):
    def __init__(self, client_factory) -> None: ...
    def run(self) -> None: ...

class GetObjectSubmitter(BaseS3TransferProcess):
    def __init__(self, transfer_config, client_factory, transfer_monitor, osutil, download_request_queue, worker_queue) -> None: ...

class GetObjectWorker(BaseS3TransferProcess):
    def __init__(self, queue, client_factory, transfer_monitor, osutil) -> None: ...
