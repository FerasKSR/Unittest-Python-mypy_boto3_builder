import asyncio
from typing import IO, Any, Dict, Optional, Tuple, Union

from _typeshed import Incomplete
from cryptography.hazmat.backends.openssl.rsa import _RSAPrivateKey, _RSAPublicKey

RANGE_REGEX: Incomplete
AES_BLOCK_SIZE: int
AES_BLOCK_SIZE_BYTES: int
JAVA_LONG_MAX_VALUE: int

class DummyAIOFile:
    file: IO[Any]
    def __init__(self, data: bytes) -> None: ...
    async def read(self, n: int = ...): ...
    async def readany(self): ...
    async def readexactly(self, n): ...
    async def readchunk(self): ...

class DecryptError(Exception): ...

class CryptoContext:
    async def setup(self) -> None: ...
    async def close(self) -> None: ...
    async def get_decryption_aes_key(
        self, key: bytes, material_description: Dict[str, Any]
    ) -> bytes: ...
    async def get_encryption_aes_key(self) -> Tuple[bytes, Dict[str, str], str]: ...

class AsymmetricCryptoContext(CryptoContext):
    public_key: Incomplete
    private_key: Incomplete
    def __init__(
        self,
        public_key: Optional[_RSAPublicKey] = ...,
        private_key: Optional[_RSAPrivateKey] = ...,
        loop: Optional[asyncio.AbstractEventLoop] = ...,
    ) -> None: ...
    async def get_decryption_aes_key(
        self, key: bytes, material_description: Dict[str, Any]
    ) -> bytes: ...
    async def get_encryption_aes_key(self) -> Tuple[bytes, Dict[str, str], str]: ...
    @staticmethod
    def from_der_public_key(data: bytes) -> _RSAPublicKey: ...
    @staticmethod
    def from_der_private_key(data: bytes, password: Optional[str] = ...) -> _RSAPrivateKey: ...

class SymmetricCryptoContext(CryptoContext):
    key: Incomplete
    def __init__(self, key: bytes, loop: Optional[asyncio.AbstractEventLoop] = ...) -> None: ...
    async def get_decryption_aes_key(
        self, key: bytes, material_description: Dict[str, Any]
    ) -> bytes: ...
    async def get_encryption_aes_key(self) -> Tuple[bytes, Dict[str, str], str]: ...

class KMSCryptoContext(CryptoContext):
    kms_key: Incomplete
    authenticated_encryption: Incomplete
    def __init__(
        self,
        keyid: Optional[str] = ...,
        kms_client_args: Optional[dict] = ...,
        authenticated_encryption: bool = ...,
    ) -> None: ...
    async def setup(self) -> None: ...
    async def close(self) -> None: ...
    async def get_decryption_aes_key(
        self, key: bytes, material_description: Dict[str, Any]
    ) -> bytes: ...
    async def get_encryption_aes_key(self) -> Tuple[bytes, Dict[str, str], str]: ...

class MockKMSCryptoContext(KMSCryptoContext):
    aes_key: Incomplete
    material_description: Incomplete
    encrypted_key: Incomplete
    authenticated_encryption: Incomplete
    def __init__(
        self,
        aes_key: bytes,
        material_description: dict,
        encrypted_key: bytes,
        authenticated_encryption: bool = ...,
    ) -> None: ...
    async def setup(self) -> None: ...
    async def close(self) -> None: ...
    async def get_decryption_aes_key(
        self, key: bytes, material_description: Dict[str, Any]
    ) -> bytes: ...
    async def get_encryption_aes_key(self) -> Tuple[bytes, Dict[str, str], str]: ...

class S3CSE:
    def __init__(
        self, crypto_context: CryptoContext, s3_client_args: Optional[dict] = ...
    ) -> None: ...
    async def setup(self) -> None: ...
    async def close(self) -> None: ...
    async def __aenter__(self): ...
    async def __aexit__(self, exc_type, exc_val, exc_tb) -> None: ...
    async def get_object(self, Bucket: str, Key: str, **kwargs) -> dict: ...
    async def put_object(
        self, Body: Union[bytes, IO], Bucket: str, Key: str, Metadata: Dict = ..., **kwargs
    ): ...
